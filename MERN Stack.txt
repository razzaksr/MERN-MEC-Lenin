MERN Stack
phase 1:
	Mongo DB
Phase 2:
	HTML, CSS, Bootstrap, Java Script
Phase 3:
	React JS
Phase 4:
	React with Firebase
	UI		>> React JS
	API		>> Firebase>> addDoc, getDoc, updateDoc
	Data		>> Firestore

Phase 5:
	API >> Backend development

	modules:
		express
		nodemon
	API as Web service(rest) >> response as JSON
		async functions with URL path and mappings
		and it will be called while mentioning that URL 
		eg: CRUD >> List
		mapping:
			post
			get
			put
			delete

		Modular approach:
			routers
			server


each mapping functions contains two parameters>> request, response


request:
	url
	parameter		>> data to be mentioned in the URL
						eg: www.amazon.in/s=Rebok-shoe
	body				>> data(JSON) to be passed via http body so that it can't be visible
	headers>> authentication

response:
	status>> 400, 500, 401, 403, 200, 201
	data	>> json
	
	1. status with data
	2. data>> HTML
	3. data>> JSON

Node Project:
	default project>> name of the project same as folder where the below command to be executed
		npm init -y
	customized project
		npm init 
		





Web service API>>
	Client		>> rest client
	API			>> express
	Database		


task 1: fd calculator 
	request>>year, amount, senior/normal
	response> maturity amount
task 2: loan calculator
	request>> loan amount
	response>> EMI by calculating standard PL interest

body-parser
	open and extract the request body contents


CRUD Operations:

1. Storage >> temp	>> data.js >> list of json
		export>> module.export = {}
	Functionalities to perform CRUD	>> dao.js
		require

	
2. Storage >> file >> perm
	fs, path

3. Storage >> MongoDB Atlas>> databases, collections
	modules>> mongoose, dotenv
	approach>>
		connect.js>> mongodb connectivity
		model.js	>> document schema
		mongodao.js	>> CRUD >> save, find, findOne, findOneAndUpdateOne, findOneAndDeleteOne
		mongocontroller
		index.js

Routers:
Flipkart
	Kart>> flipkart.com/kart >> router
		C>> flipkart.com/kart/new
		R>> flipkart.com/kart/view
		U>> flipkart.com/kart/edit
		D>> flipkart.com/kart/remove

	Orders>> flipkart.com/orders >> router	
		C>> flipkart.com/orders/place
		R>> flipkart.com/orders/view
Car:
	temp		>> /stat
		stat/>> new 
		stat/>> read
	perm	>> /actual
		actual/>> new

Flow
	1. temporary CRUD>> localhost:1234/stat
	http>> index.js>>statcontroller>>dao>>data.js
	2. Permanent CRUD>> localhost:1234/actual
	http>> index.js>>permcontroller>>permdao>>perm.json
	3. Database CRUD>> localhost:1234/db
	http>> index>> atlascontroller>>atlasdao>>model>>contact(db onfig)



Modular approach connect with MongoDB

connect>> mongo db configuration
schema>> mongoose
dao>> CRUD>> save, findOne, find, findOneAndUpdate
controller>> router call to dao
index>> controller will be added by any path


Security:
username and password
role based
jsonwebtoken
bcrypt


token flow>>
visit app>> username and password>> authenticated by jwt>> generate token(base64encode)>> it will be saved for some time(days, weeks, hours)

token:
header>> signing algorithm>> encrypt
payload>> subject>> user data>> username, role, full name
secret/signature>> verify



userSchema>> fullname, username, password(hashed via pre function), role(default officials)
userDao		>> registerUser
userController	>> signup
index>> auth

authorization flow:
	login >> username and password>> token

	endpoints >> secured>> must include Authorization Header with Bearer 
		access endpoint with authorized token
		if not 401 unauthorized error

	Token generation:
		jwt>> jsonwebtoken>> sign(payload, secret, expire)
	Token Verification:
		Authorization: Bearer TOKEN
		middleware: token verification
			whenever the request reached at the endpoint it will execute first
			>> request>> index.js>> controller >> endpoint>> middleware>> enpoint other logic

			1. it'll check whether the request contains Authorization Header or not
			2. verify(token, secret)
			3. payload may contain the username since token generation logic included it
			4. check the extracted username is available in the userlist
			5. if so next()>> forward/ proceed with other logic of the same endpoint
			6. if not forbidden >> 403
		middleware: role verification
			endpoints are secured with jwt and specified role
			even though authorized user logging in endpoint which secured by role check they become forbidden access




Integration:
	Mongo DB	>> data
	Back end >> API
		enable cors
	Front end >> React JS
		login			>> signin	>> token
		dashboard
		car View
		add
		update
		delete
		logout
		apiCall >> axios call to backend url


